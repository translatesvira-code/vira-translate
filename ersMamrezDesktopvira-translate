'use client';

import React, { useState, useEffect, useCallback } from 'react';
import Image from 'next/image';
import { useRouter } from 'next/navigation';
import { toPersianNumbers } from '../../utils/numbers';
import DatePicker from 'react-multi-date-picker';
import persian from 'react-date-object/calendars/persian';
import persian_fa from 'react-date-object/locales/persian_fa';
import { unifiedAPI, UnifiedOrder } from '../../lib/unified-api';

interface Client {
  id: number;
  code: string;
  name: string;
  firstName?: string;
  lastName?: string;
  company?: string;
  phone?: string;
  email?: string;
  address?: string;
  nationalId?: string;
  serviceType: string;
  translateDate: string;
  deliveryDate: string;
  status: 'acceptance' | 'completion' | 'translating' | 'editing' | 'office' | 'ready' | 'archived';
}

interface ClientProfileProps {
  clientName: string;
}

const ClientProfile: React.FC<ClientProfileProps> = ({ clientName }) => {
  const router = useRouter();
  const [client, setClient] = useState<Client | null>(null);
  const [orders, setOrders] = useState<UnifiedOrder[]>([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'userInfo' | 'visits' | 'financial'>('userInfo');
  const [isEditingDescription, setIsEditingDescription] = useState(false);
  const [description, setDescription] = useState('');
  const [showSaveMessage, setShowSaveMessage] = useState(false);
  const [showStatusModal, setShowStatusModal] = useState(false);
  const [isStatusModalClosing, setIsStatusModalClosing] = useState(false);
  const [selectedStatus, setSelectedStatus] = useState<string>('');
  const [showStatusSuccess, setShowStatusSuccess] = useState(false);
  const [editingField, setEditingField] = useState<string | null>(null);
  const [showEditModal, setShowEditModal] = useState(false);
  const [isEditModalClosing, setIsEditModalClosing] = useState(false);
  const [showEditSuccess, setShowEditSuccess] = useState(false);
  const [editForm, setEditForm] = useState({
    name: '',
    code: '',
    serviceType: '',
    translateDate: '',
    deliveryDate: ''
  });
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [isDeleteModalClosing, setIsDeleteModalClosing] = useState(false);
  const [orderToDelete, setOrderToDelete] = useState<UnifiedOrder | null>(null);
  const [showDeleteSuccess, setShowDeleteSuccess] = useState(false);
  interface UploadedFile {
    id: string;
    name: string;
    title: string;
    category: 'original' | 'translated' | 'scanned_translated';
    size: number;
    type: string;
    uploadDate: string;
    file: File;
  }

  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([]);
  const [isDragOver, setIsDragOver] = useState(false);
  const [editingFileTitle, setEditingFileTitle] = useState<string | null>(null);
  const [fileTitle, setFileTitle] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [lightboxImage, setLightboxImage] = useState<string | null>(null);

  // Helper function to get display name

  const getDisplayName = (client: Client): string => {
    // Priority: company > name > firstName + lastName
    if (client.company && client.company.trim()) {
      return client.company.trim();
    }
    if (client.name && client.name.trim()) {
      return client.name.trim();
    }
    if (client.firstName || client.lastName) {
      return `${client.firstName || ''} ${client.lastName || ''}`.trim();
    }
    return 'نامشخص';
  };

  const loadOrders = useCallback(async () => {
    try {
      const unifiedData = await unifiedAPI.getUnifiedOrders();
      
      // Filter orders for this specific client by client code
      const clientOrders = unifiedData.orders.filter(order => order.clientCode === clientName);
      setOrders(clientOrders);
    } catch (error) {
      console.error('Error loading orders:', error);
    }
  }, [clientName]);

  useEffect(() => {
    const loadClient = async () => {
      setLoading(true);
      try {
        // Load clients from unified orders API
        const unifiedData = await unifiedAPI.getUnifiedOrders();
        
        // Group orders by client code and get the latest order for each client
        const clientGroups = unifiedData.orders.reduce((groups, order) => {
          const clientCode = order.clientCode;
          if (!groups[clientCode]) {
            groups[clientCode] = [];
          }
          groups[clientCode].push(order);
          return groups;
        }, {} as Record<string, typeof unifiedData.orders>);
        
        // Create clients from unified orders data, using the latest order for status
        const clientsFromUnified = Object.values(clientGroups).map(clientOrders => {
          // Sort by updatedAt to get the latest order
          const latestOrder = clientOrders.sort((a, b) => 
            new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()
          )[0];
          
          return {
            id: Number(latestOrder.clientId),
            code: latestOrder.clientCode,
            name: latestOrder.clientName,
            firstName: latestOrder.clientFirstName,
            lastName: latestOrder.clientLastName,
            company: latestOrder.clientCompany,
            phone: latestOrder.clientPhone,
            email: latestOrder.clientEmail,
            address: latestOrder.clientAddress,
            nationalId: latestOrder.clientNationalId,
            serviceType: latestOrder.serviceType || 'ترجمه',
            translateDate: latestOrder.createdAt ? new Date(latestOrder.createdAt).toLocaleDateString('fa-IR') : '',
            deliveryDate: latestOrder.status === 'ready' ? new Date(latestOrder.updatedAt).toLocaleDateString('fa-IR') : '',
            status: latestOrder.status === 'acceptance' ? 'acceptance' as const :
                    latestOrder.status === 'completion' ? 'completion' as const :
                    latestOrder.status === 'translation' ? 'translating' as const :
                    latestOrder.status === 'editing' ? 'editing' as const :
                    latestOrder.status === 'office' ? 'office' as const :
                    latestOrder.status === 'ready' ? 'ready' as const :
                    'acceptance' as const
          };
        });
        
        // No need to remove duplicates since we already grouped by client code
        const uniqueClients = clientsFromUnified;
        
        // Find client by code (since we're passing client.code from Clients component)
        const foundClient = uniqueClients.find(client => client.code === clientName);
        
        if (foundClient) {
          setClient(foundClient);
          
          // Find the latest order for this client to get special instructions
          const clientOrders = clientGroups[foundClient.code] || [];
          const latestOrder = clientOrders.sort((a, b) => 
            new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()
          )[0];
          
          // Set description from latest order's special instructions
          setDescription(latestOrder?.specialInstructions || '');
        } else {
          console.log('Client not found:', clientName);
          setClient(null);
        }
      } catch (error) {
        console.error('Error loading client:', error);
        setClient(null);
      } finally {
        setLoading(false);
      }
    };

    loadClient();
    
    // Load orders for this client
    loadOrders();
  }, [clientName, loadOrders]);

  const handleBack = () => {
    router.push('/?tab=clients');
  };

  const handleEditDescription = () => {
    setIsEditingDescription(true);
  };

  const handleSaveDescription = () => {
    setIsEditingDescription(false);
    setShowSaveMessage(true);
    // Here you can save the description to your backend
    console.log('Description saved:', description);
    
    setTimeout(() => {
      setShowSaveMessage(false);
    }, 3000);
  };

  const handleCancelEdit = () => {
    setIsEditingDescription(false);
    // Reset to original description
    setDescription('این پروژه شامل ترجمه متون تخصصی با بالاترین کیفیت و دقت می‌باشد. تمامی مراحل ترجمه، ویرایش و بازخوانی با دقت انجام خواهد شد.');
  };

  const handleStatusClick = (status: string) => {
    if (client && status !== client.status) {
      setSelectedStatus(status);
      setShowStatusModal(true);
    }
  };

  const handleConfirmStatusChange = async () => {
    if (client && selectedStatus) {
      try {
        // First, update the order status in the backend for all orders of this client
        const clientOrders = orders.filter(o => o.clientCode === client.code);
        
        for (const order of clientOrders) {
          // Map client status to order status
          const orderStatus = selectedStatus === 'translating' ? 'translation' : selectedStatus;
          
          const success = await unifiedAPI.updateOrderStatus(
            order.id, 
            orderStatus, 
            'user', 
            `وضعیت سفارش از پروفایل مشتری به ${getStatusText(selectedStatus)} تغییر یافت`
          );
          
          if (!success) {
            console.error(`Failed to update order ${order.id} status`);
          }
        }
        
        // Update local client state immediately (since we already updated orders in backend)
        setClient(prev => prev ? { ...prev, status: selectedStatus as 'acceptance' | 'completion' | 'translating' | 'editing' | 'office' | 'ready' | 'archived' } : null);
        
        // Update local orders state to reflect the new status
        setOrders(prevOrders => 
          prevOrders.map(order => 
            order.clientCode === client.code
              ? { ...order, status: selectedStatus === 'translating' ? 'translation' : selectedStatus as 'acceptance' | 'completion' | 'translation' | 'editing' | 'office' | 'ready' }
              : order
          )
        );
        
        handleCloseStatusModal();
        setShowStatusSuccess(true);
        
        setTimeout(() => {
          setShowStatusSuccess(false);
        }, 3000);
      } catch (error) {
        console.error('Error updating client status:', error);
        // Fallback to local state update
        setClient(prev => prev ? { ...prev, status: selectedStatus as 'acceptance' | 'completion' | 'translating' | 'editing' | 'office' | 'ready' | 'archived' } : null);
        setOrders(prevOrders => 
          prevOrders.map(order => 
            order.clientId === client.id.toString() 
              ? { ...order, status: selectedStatus === 'translating' ? 'translation' : selectedStatus as 'acceptance' | 'completion' | 'translation' | 'editing' | 'office' | 'ready' }
              : order
          )
        );
        handleCloseStatusModal();
        setShowStatusSuccess(true);
        
        setTimeout(() => {
          setShowStatusSuccess(false);
        }, 3000);
      }
    }
  };

  const handleCloseStatusModal = () => {
    setIsStatusModalClosing(true);
    setTimeout(() => {
      setShowStatusModal(false);
      setIsStatusModalClosing(false);
      setSelectedStatus('');
    }, 300);
  };

  const handleEditField = (field: string) => {
    if (client) {
      setEditingField(field);
      setEditForm({
        name: client.name,
        code: client.code,
        serviceType: client.serviceType,
        translateDate: client.translateDate,
        deliveryDate: client.deliveryDate
      });
      setShowEditModal(true);
    }
  };

  const handleSaveEdit = () => {
    if (client && editingField) {
      setClient(prev => prev ? { ...prev, ...editForm } : null);
      handleCloseEditModal();
      setShowEditSuccess(true);
      
      setTimeout(() => {
        setShowEditSuccess(false);
      }, 3000);
    }
  };

  const handleCloseEditModal = () => {
    setIsEditModalClosing(true);
    setTimeout(() => {
      setShowEditModal(false);
      setIsEditModalClosing(false);
      setEditingField(null);
    }, 300);
  };

  const handleDeleteOrder = (order: UnifiedOrder) => {
    setOrderToDelete(order);
    setShowDeleteModal(true);
  };

  const handleConfirmDeleteOrder = async () => {
    if (orderToDelete) {
      try {
        console.log('🗑️ Deleting order:', orderToDelete);
        const success = await unifiedAPI.deleteUnifiedOrder(orderToDelete.id, false);
        
        if (success) {
          // Remove order from local state
          setOrders(prevOrders => prevOrders.filter(order => order.id !== orderToDelete.id));
          setShowDeleteSuccess(true);
          
          setTimeout(() => {
            setShowDeleteSuccess(false);
          }, 3000);
        } else {
          console.error('Failed to delete order');
        }
        
        handleCloseDeleteModal();
      } catch (error) {
        console.error('Error deleting order:', error);
        handleCloseDeleteModal();
      }
    }
  };

  const handleCloseDeleteModal = () => {
    setIsDeleteModalClosing(true);
    setTimeout(() => {
      setShowDeleteModal(false);
      setIsDeleteModalClosing(false);
      setOrderToDelete(null);
    }, 300);
  };

  const handleFileUpload = (files: FileList) => {
    Array.from(files).forEach(file => {
      const newFile: UploadedFile = {
        id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
        name: file.name,
        title: file.name.split('.')[0], // استفاده از نام فایل بدون پسوند به عنوان تایتل پیش‌فرض
        category: 'original' as 'original' | 'translated' | 'scanned_translated', // دسته‌بندی پیش‌فرض
        size: file.size,
        type: file.type,
        uploadDate: new Date().toLocaleDateString('fa-IR'),
        file: file // ذخیره فایل اصلی
      };
      setUploadedFiles(prev => [...prev, newFile]);
    });
  };

  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      handleFileUpload(e.target.files);
    }
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragOver(false);
    if (e.dataTransfer.files) {
      handleFileUpload(e.dataTransfer.files);
    }
  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  const removeFile = (fileId: string) => {
    setUploadedFiles(prev => prev.filter(file => file.id !== fileId));
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 بایت';
    const k = 1024;
    const sizes = ['بایت', 'کیلوبایت', 'مگابایت', 'گیگابایت'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const getFileIcon = (fileType: string) => {
    if (fileType.includes('pdf')) return '📄';
    if (fileType.includes('image') || fileType.includes('jpeg') || fileType.includes('jpg') || fileType.includes('png') || fileType.includes('gif')) return '🖼️';
    return '📁';
  };

  const handleEditFileTitle = (fileId: string, currentTitle: string) => {
    setEditingFileTitle(fileId);
    setFileTitle(currentTitle);
  };

  const handleSaveFileTitle = (fileId: string) => {
    setUploadedFiles(prev => 
      prev.map(file => 
        file.id === fileId 
          ? { ...file, title: fileTitle }
          : file
      )
    );
    setEditingFileTitle(null);
    setFileTitle('');
  };

  const handleCancelEditFileTitle = () => {
    setEditingFileTitle(null);
    setFileTitle('');
  };

  const handleCategoryChange = (fileId: string, category: 'original' | 'translated' | 'scanned_translated') => {
    setUploadedFiles(prev => 
      prev.map(file => 
        file.id === fileId 
          ? { ...file, category }
          : file
      )
    );
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'original': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'translated': return 'bg-green-100 text-green-800 border-green-200';
      case 'scanned_translated': return 'bg-purple-100 text-purple-800 border-purple-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const filteredFiles = selectedCategory === 'all' 
    ? uploadedFiles 
    : uploadedFiles.filter(file => file.category === selectedCategory);

  const handleViewFile = (file: UploadedFile) => {
    if (file.type.includes('image')) {
      // برای عکس‌ها لایت‌باکس نمایش بده
      const reader = new FileReader();
      reader.onload = (e) => {
        if (e.target?.result) {
          setLightboxImage(e.target.result as string);
        }
      };
      reader.readAsDataURL(file.file);
    } else if (file.type.includes('pdf')) {
      // برای PDF ها در تب جدید باز کن
      const reader = new FileReader();
      reader.onload = (e) => {
        if (e.target?.result) {
          const pdfUrl = e.target.result as string;
          window.open(pdfUrl, '_blank');
        }
      };
      reader.readAsDataURL(file.file);
    }
  };

  const closeLightbox = () => {
    setLightboxImage(null);
  };

  const handleDownloadFile = (file: UploadedFile) => {
    // ایجاد لینک دانلود
    const url = URL.createObjectURL(file.file);
    const link = document.createElement('a');
    link.href = url;
    link.download = file.name;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };


  const getStatusText = (status: string) => {
    switch (status) {
      case 'acceptance': return 'پذیرش';
      case 'completion': return 'تکمیل اطلاعات';
      case 'translating': return 'ترجمه';
      case 'editing': return 'ویرایش';
      case 'office': return 'امور دفتری';
      case 'ready': return 'آماده تحویل';
      case 'archived': return 'بایگانی';
      default: return status;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'acceptance': return 'bg-blue-100 text-blue-800 border border-blue-200';
      case 'completion': return 'bg-indigo-100 text-indigo-800 border border-indigo-200';
      case 'translating': return 'bg-orange-100 text-orange-800 border border-orange-200';
      case 'editing': return 'bg-purple-100 text-purple-800 border border-purple-200';
      case 'office': return 'bg-pink-100 text-pink-800 border border-pink-200';
      case 'ready': return 'bg-yellow-100 text-yellow-800 border border-yellow-200';
      case 'archived': return 'bg-gray-100 text-gray-800 border border-gray-200';
      default: return 'bg-gray-100 text-gray-800 border border-gray-200';
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen p-8" style={{ backgroundColor: '#f5f4f1' }}>
        <div className="max-w-7xl mx-auto">
          <div className="mb-6">
            <button
              onClick={handleBack}
              className="flex items-center gap-2 transition-colors duration-200 cursor-pointer"
              style={{ color: '#4b483f' }}
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
              بازگشت به لیست مراجعین
            </button>
          </div>
          <div className="bg-white rounded-lg border border-gray-200 p-8">
            <div className="flex items-center justify-center">
              <div className="flex items-center gap-3">
                <div className="animate-spin rounded-full h-6 w-6 border-b-2" style={{ borderColor: '#4b483f' }}></div>
                <span style={{ color: '#4b483f' }}>در حال بارگذاری...</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (!client) {
    return (
      <div className="min-h-screen p-8" style={{ backgroundColor: '#f5f4f1' }}>
        <div className="max-w-7xl mx-auto">
          <div className="mb-6">
            <button
              onClick={handleBack}
              className="flex items-center gap-2 text-gray-600 hover:text-gray-800 transition-colors duration-200 cursor-pointer"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
              بازگشت به لیست مراجعین
            </button>
          </div>
          <div className="bg-white rounded-lg border border-gray-200 p-8">
            <div className="text-center">
              <h1 className="text-2xl font-bold text-gray-800 mb-4">مراجع یافت نشد</h1>
              <p className="text-gray-600">اطلاعات مراجع مورد نظر یافت نشد.</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen p-8" style={{ backgroundColor: '#f5f4f1' }}>
      <div className="max-w-7xl mx-auto">
        {/* Back Button */}
        <div className="mb-6">
          <button
            onClick={handleBack}
            className="flex items-center gap-2 transition-colors duration-200 cursor-pointer"
            style={{ color: '#4b483f' }}
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
            </svg>
            بازگشت به لیست مراجعین
          </button>
        </div>

        {/* Profile Header */}
        <div className="bg-white rounded-lg border border-gray-200 p-4 mb-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-800 mb-2">
                پروفایل: {getDisplayName(client)}
              </h1>
              <p className="text-gray-600">کد سفارش: {toPersianNumbers(client.code)}</p>
            </div>
            <div className="text-left">
              <span className={`inline-flex items-center px-4 py-2 text-sm font-medium rounded-full ${getStatusColor(client.status)}`}>
                {getStatusText(client.status)}
              </span>
            </div>
          </div>
        </div>

        {/* Tab Navigation */}
        <div className="mb-6">
          <div className="flex bg-gray-100 rounded-lg p-1 w-fit">
            <button
              onClick={() => setActiveTab('userInfo')}
              className={`px-4 py-2 text-sm font-medium rounded-md transition-colors cursor-pointer ${
                activeTab === 'userInfo'
                  ? 'bg-white text-gray-900 shadow-sm'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              اطلاعات کاربری
            </button>
            <button
              onClick={() => setActiveTab('visits')}
              className={`px-4 py-2 text-sm font-medium rounded-md transition-colors cursor-pointer ${
                activeTab === 'visits'
                  ? 'bg-white text-gray-900 shadow-sm'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              مراجعات
            </button>
            <button
              onClick={() => setActiveTab('financial')}
              className={`px-4 py-2 text-sm font-medium rounded-md transition-colors cursor-pointer ${
                activeTab === 'financial'
                  ? 'bg-white text-gray-900 shadow-sm'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              مالی
            </button>
          </div>
        </div>

        {/* Tab Content */}
        {activeTab === 'userInfo' && (
          <div className="grid grid-cols-1 gap-4">
          {/* Basic Information */}
          <div className="bg-gray-50 rounded-lg border border-gray-200 p-4">
            <h2 className="text-lg font-semibold text-gray-800 mb-3 flex items-center gap-2">
              <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
              اطلاعات شخصی
            </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {/* Company Name */}
                {client.company && client.company.trim() && (
                  <div className="bg-white rounded-lg p-3 border border-gray-200">
                    <div className="flex justify-between items-center mb-1">
                      <label className="text-sm text-gray-500">نام شرکت</label>
                      <button
                        onClick={() => handleEditField('company')}
                        className="text-gray-400 hover:text-blue-600 transition-colors duration-200 cursor-pointer"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                      </button>
                    </div>
                    <p className="font-medium text-gray-800">{client.company}</p>
                  </div>
                )}
                
                {/* Personal Name */}
                {(client.firstName || client.lastName || client.name) && (
                  <div className="bg-white rounded-lg p-3 border border-gray-200">
                    <div className="flex justify-between items-center mb-1">
                      <label className="text-sm text-gray-500">نام و نام خانوادگی</label>
                      <button
                        onClick={() => handleEditField('name')}
                        className="text-gray-400 hover:text-blue-600 transition-colors duration-200 cursor-pointer"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                      </button>
                    </div>
                    <p className="font-medium text-gray-800">
                      {client.firstName && client.lastName 
                        ? `${client.firstName} ${client.lastName}`
                        : client.name
                      }
                    </p>
                  </div>
                )}
                
                {/* Contact Information */}
                {client.phone && (
                  <div className="bg-white rounded-lg p-3 border border-gray-200">
                    <div className="flex justify-between items-center mb-1">
                      <label className="text-sm text-gray-500">شماره تلفن</label>
                      <button
                        onClick={() => handleEditField('phone')}
                        className="text-gray-400 hover:text-blue-600 transition-colors duration-200 cursor-pointer"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                      </button>
                    </div>
                    <p className="font-medium text-gray-800">{client.phone}</p>
                  </div>
                )}
                
                {client.email && (
                  <div className="bg-white rounded-lg p-3 border border-gray-200">
                    <div className="flex justify-between items-center mb-1">
                      <label className="text-sm text-gray-500">ایمیل</label>
                      <button
                        onClick={() => handleEditField('email')}
                        className="text-gray-400 hover:text-blue-600 transition-colors duration-200 cursor-pointer"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                      </button>
                    </div>
                    <p className="font-medium text-gray-800">{client.email}</p>
                  </div>
                )}
                
                {client.address && (
                  <div className="bg-white rounded-lg p-3 border border-gray-200">
                    <div className="flex justify-between items-center mb-1">
                      <label className="text-sm text-gray-500">آدرس</label>
                      <button
                        onClick={() => handleEditField('address')}
                        className="text-gray-400 hover:text-blue-600 transition-colors duration-200 cursor-pointer"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                      </button>
                    </div>
                    <p className="font-medium text-gray-800">{client.address}</p>
                  </div>
                )}
                
                {client.nationalId && (
                  <div className="bg-white rounded-lg p-3 border border-gray-200">
                    <div className="flex justify-between items-center mb-1">
                      <label className="text-sm text-gray-500">کد ملی</label>
                      <button
                        onClick={() => handleEditField('nationalId')}
                        className="text-gray-400 hover:text-blue-600 transition-colors duration-200 cursor-pointer"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                      </button>
                    </div>
                    <p className="font-medium text-gray-800">{client.nationalId}</p>
                  </div>
                )}
                
                {/* Service Information */}
                <div className="bg-white rounded-lg p-3 border border-gray-200">
                  <label className="text-sm text-gray-500 block mb-1">کد مشتری</label>
                  <p className="font-medium text-gray-800">{client.code}</p>
                </div>
                
                <div className="bg-white rounded-lg p-3 border border-gray-200">
                  <div className="flex justify-between items-center mb-1">
                    <label className="text-sm text-gray-500">نوع خدمات</label>
                    <button
                      onClick={() => handleEditField('serviceType')}
                      className="text-gray-400 hover:text-blue-600 transition-colors duration-200 cursor-pointer"
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor"